generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

model ApiLog {
  id              Int          @id @default(autoincrement())
  cardId          String       @unique
  cardType        String
  userInputs      Json
  promptVersion   String
  responseContent String       @db.Text
  tokensUsed      Int
  duration        Int
  timestamp       DateTime     @default(now())
  isError         Boolean      @default(false)
  errorMessage    String?      @db.Text
  r2Url           String?
  userId          String?      
  modificationFeedback String? @db.Text
  user            User?        @relation(fields: [userId], references: [id])
  userActions     UserAction[]
  editedCards     EditedCard[] @relation("OriginalCard")
}

model Template {
  id             String   @id @default(cuid())
  cardId         String      @unique
  cardType       String
  promptVersion  String
  name           String
  description    String
  previewSvg     String   @db.Text
  promptContent  String   @db.Text
  r2Url          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserAction {
  id        String   @id @default(cuid())
  cardId    String
  action    String
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  apiLog    ApiLog   @relation(fields: [cardId], references: [cardId], onDelete: NoAction, onUpdate: NoAction)

  @@index([cardId])
  @@index([userId])
}

model EditedCard {
  id             String   @id @default(cuid())
  originalCardId String
  cardType       String
  relationship   String?
  editedContent  String
  spotifyTrackId String?
  r2Url          String?
  userId         String?
  customUrl      String?
  message        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  originalCard   ApiLog   @relation("OriginalCard", fields: [originalCardId], references: [cardId], onDelete: NoAction, onUpdate: NoAction)
  user           User?    @relation(fields: [userId], references: [id])

  @@index([originalCardId])
  @@index([userId])
}

model SpotifyMusic {
  id           String   @id @default(cuid())
  cardType     String
  spotifyId    String
  name         String
  artist       String
  previewUrl   String?
  imageUrl     String?
  selectCount  Int      @default(0)
  lastSelected DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([cardType, spotifyId])
  @@index([cardType, selectCount])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  apiUsages     ApiUsage[]
  subscription  Subscription?
  cards         ApiLog[]
  userActions   UserAction[]
  editedCards   EditedCard[]
  cardGenerators CardGenerator[]
  plan          PlanType       @default(FREE)
  bonusCredits  BonusCredit[]
  stripeLogs    StripeLog[]
}

model ApiUsage {
  id        Int      @id @default(autoincrement())
  userId    String
  date      DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  count     Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model Subscription {
  id            Int          @id @default(autoincrement())
  userId        String       @unique
  plan          PlanType     @default(FREE)
  billingPeriod BillingPeriod?
  startDate     DateTime     @default(now())
  endDate       DateTime?
  status        String       @default("active")
  cancelAtPeriodEnd Boolean  @default(false)
  trialEndsAt   DateTime?
  lastBilledAt  DateTime?
  nextBillingAt DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BonusCredit {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Int
  reason      String   // e.g., "signup_bonus", "referral", "promotion"
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isUsed      Boolean  @default(false)

  @@index([userId])
}

model CardGenerator {
  id          String   @id @default(cuid())
  name        String   // 生成器名称
  slug        String   @unique // URL friendly name
  description String?  // 描述
  isSystem    Boolean  @default(false) // 是否系统默认生成器
  isPublic    Boolean  @default(false) // 是否公开
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  // 创建者ID,系统生成器为null
  user        User?    @relation(fields: [userId], references: [id])
  
  // 配置信息
  title       String   // 页面标题
  label       String   // 显示标签
  fields      Json     // 输入字段配置
  advancedFields Json? // 高级字段配置
  templateInfo String? // 模板信息
  why         Json?    // 为什么选择这个生成器
  promptContent String // AI 提示词模板

  // 关联的卡片
}

model MissingGenerator {
  id          String   @id @default(cuid())
  searchTerm  String   @unique
  count       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isProcessed Boolean  @default(false)
  notes       String?

  @@index([count])
  @@index([createdAt])
}

model StripeLog {
  id              String        @id @default(cuid())
  userId          String?       
  user            User?         @relation(fields: [userId], references: [id])
  eventId         String        @unique // Stripe event ID
  eventType       String        // Type of the Stripe event (e.g., checkout.session.completed)
  objectId        String        // ID of the relevant Stripe object (e.g., subscription ID, invoice ID)
  objectType      String        // Type of the Stripe object (e.g., subscription, invoice)
  amount          Int?          // Amount in cents
  currency        String?       // Currency code
  status          String?       // Status of the payment/subscription
  paymentMethod   String?       // Payment method used
  description     String?       // Description of the transaction
  metadata        Json?         // Additional metadata
  rawData         Json          // Complete JSON response for detailed auditing
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([eventType])
  @@index([objectId])
  @@index([createdAt])
}

