generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiLog {
  id              Int          @id @default(autoincrement())
  cardId          String       @unique
  cardType        String
  userInputs      Json
  promptVersion   String
  responseContent String       @db.Text
  tokensUsed      Int
  duration        Int
  timestamp       DateTime     @default(now())
  isError         Boolean      @default(false)
  errorMessage    String?      @db.Text
  r2Url           String?
  userId          String?      
  user            User?        @relation(fields: [userId], references: [id])
  userActions     UserAction[]
  editedCards     EditedCard[] @relation("OriginalCard")
}

model Template {
  id             String   @id @default(cuid())
  cardId         String      @unique
  cardType       String
  promptVersion  String
  name           String
  description    String
  previewSvg     String   @db.Text
  promptContent  String   @db.Text
  r2Url             String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserAction {
  id        String   @id @default(cuid())
  cardId    String
  action    String
  timestamp DateTime @default(now())
  apiLog    ApiLog   @relation(fields: [cardId], references: [cardId], onDelete: NoAction, onUpdate: NoAction)

  @@index([cardId])
}

model EditedCard {
  id             String   @id @default(cuid())
  originalCardId String
  cardType       String
  editedContent  String
  spotifyTrackId String?
  r2Url          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  originalCard   ApiLog   @relation("OriginalCard", fields: [originalCardId], references: [cardId], onDelete: NoAction, onUpdate: NoAction)

  @@index([originalCardId])
}

model SpotifyMusic {
  id           String   @id @default(cuid())
  cardType     String
  spotifyId    String
  name         String
  artist       String
  previewUrl   String?
  imageUrl     String?
  selectCount  Int      @default(0)
  lastSelected DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([cardType, spotifyId])
  @@index([cardType, selectCount])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      // 添加 NextAuth.js 所需的字段
  image         String?        // 添加 NextAuth.js 所需的字段
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]      // 添加 NextAuth.js 关系
  sessions      Session[]      // 添加 NextAuth.js 关系
  apiUsages     ApiUsage[]
  subscription  Subscription?
  cards         ApiLog[]       // 添加卡片关系
  plan          PlanType  @default(FREE)
}

model ApiUsage {
  id        Int      @id @default(autoincrement())
  userId    String
  date      DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  count     Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, date])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  plan      PlanType  @default(FREE)
  startDate DateTime  @default(now()) @db.Timestamp(6)
  endDate   DateTime? @db.Timestamp(6)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
}
